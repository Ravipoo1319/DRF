{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}}
{\colortbl ;\red255\green0\blue0;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\cf1\b\f0\fs36\lang9 1. What is Python? What are the benefits of using Python?\par
\cf0\b0\fs32 Python is high-level, interpreted, general purpose programming language. It has simple easy to learn syntax that enhances the readability and reduces the cost of maintenance of the programs. Python supports objects, modules, third party packeges etc.\par
\cf1\b\fs36 2. What is a dynamically typed language?\par
\cf0\b0\fs32 In python, type checking is done during execution. So, python is dynamically typed language. In statically typed language, data types are checked before the execution. Python is also a strongly typed language. In strongly typed language, "1" + 2 will through an error. (No implicit conversion of data types). In weekly typed language, "1" + 2 will result into 12. So here, implicit conversion of data type happened.\par
\cf1\b\fs36 3. What is an Interpreted language?\par
\cf0\b0\fs32 Interpreted language executes it's statements line by line. The languages such as python, JavaScript etc are the examples of interpreted language.\par
\cf1\b\fs36 4. What is PEP 8 and why is it important?\par
\cf0\b0\fs32 PEP stands for Python Enhancement Proposal It is an official design document which provides inforamtion to the python community. PEP 8 is important since it provides the style guidelines for Python code.\par
\cf1\b\fs36 5. What is Scope in Python?\par
\cf0\b0\fs32 Everything in python is an object. And these objects are within a scope in python function. Scope basically defines the accessibility of variables. During execution of code following scopes are created;\par
a. Local Scope => It refers to the local objects available in the current function. That object is only accessible within that scope only.\par
b. Global Scope => The object which are present in global scope that will be accessible to any part of the code.\par
\cf1\b\fs36 6. What are lists and tuples? What is the key difference between the two?\par
\cf0\b0\fs32 List and tuples are used to store the collection of objects of different datatypes. List can be represented by square brackets and tuples can be represented by parentheses. The basic difference between list and tuple is, list is mutable and tuple is immutable. That means we can modify the list but we can not modify the tuples.\cf1\b\fs36\par
7. What are the common built-in data types in Python?\par
\cf0\b0\fs32 There are several data types in python.\par
a. NoneType => It represents the null value in python.\par
b. Numeric Types => There are three distinct numeric types int,float, complex numbers.\par
c. Sequence Types => There are three basic sequence types lists, tuples and range. In order to traverse these type of data types we can use "in" and "not in" operators.\par
d. Mapping type => There is currently only one standard mapping type called Dictionary in python. It stores the item in the form of key:value pairs.\par
e. Set Types => There are two set types datatypes in python Set and frozenset. Set => Mutable unordered collection. Frozenset => Immutable unordered collection.\par
\cf1\b\fs36 8. What is pass in Python?\par
\cf0\b0\fs32 The pass keyword represents a null operation in python. Let suppose we have an empty function. If I call that empty function, it will throw an error. In order to avoid these kind of error we used pass keyword instead of leaving empty function block.\par
Example:\par
def my_func():\par
  pass\par
\par
print(my_func())\cf1\b\fs36\par
9. What is the use of self in Python?\par
\cf0\b0\fs32 The self is used to represent the instance of the class. With the help of this keyword we can access the attributes and methods of the class. It is not a keyword in python, we can give any name to it.\par
Example;\par
class Operations:\par
  def __init__(self,x,y):\par
    self.x = x\par
    self.y = y\par
\par
  def add(self):\par
    return self.x + self.y\par
\par
oper1 = Operations(10,15)\par
print(oper1.add())\cf1\b\fs36\par
10. What is __init__?\par
\cf0\b0\fs32 It is a constructor method, and it will be executed to allocate memory whenever a new instance or object is created.\par
Example;\par
class Operations:\par
  def __init__(self,x,y):\par
    self.x = x\par
    self.y = y\par
\par
  def add(self):\par
    return self.x + self.y\par
\par
oper1 = Operations(10,15)\par
print(oper1.add())\par
\par
\cf1\b\fs36 11. What are modules and packages in Python?\par
\cf0\b0\fs32 Modules are simply a python file with or without .py extension which has set of functions, classes or variables defined and implemented. We can use that module just by importing it. If we need only one function from the module that we can do like "from module_name import function_name". Package is a set of modules. Modules that are related to each other are put in same package.\par
Example;\par
import random\par
print(random.randint(1,10))\par
\par
\cf1\b\fs36 12. What are global, protected and private attributes in Python?\par
\cf0\b0\fs32 Global variables are the public variables that are defined inside the global scope. To use this global varible inside any function we can use it just by putting "global" keyword infront of it.\par
Protected attributes are the attributes which begin with single underscore. These attributes can be modified from outside of the class.\par
Private attribute are the attributes which starts with double underscore.\par
\par
\cf1\b\fs36 13. What is docstring in Python?\par
\cf0\b0\fs32 Documentation string or doc string is a multiline string. It is used to describe what our function or method is doing.\par
Example;\par
def add(x,y):\par
  """Takes two integer as parameter and return sum of these two integer"""\par
  return x + y\par
\par
add(3,4) \par
print(add.__doc__)\par
help(add)\par
\par
\cf1\b\fs36 14. What is slicing in Python?\par
\cf0\b0\fs32 Slicing means taking or copying part of. The syntax for slicing is [start:end:step]. Start => Include, end => Exclude\par
Example;\par
str = "Hello world"\par
print(str[0:5:2])\par
my_list = [1,12,454,78,15]\par
print(my_list[1:3])\par
\par
\cf1\b\fs36 15. What is the difference between Python Arrays and lists?\par
\cf0\b0\fs32 Arrays in python only contain element of same data types. But list can contain elements of different data types. Arrays takes less memory than list.\par
Example;\par
import array\par
a = array.array('i', [1, 2, 3])\par
for i in a:\par
    print(i, end=' ')    #OUTPUT: 1 2 3\par
a = array.array('i', [1, 2, 'string'])    #OUTPUT: TypeError: an integer is required (got type str)\par
a = [1, 2, 'string']\par
for i in a:\par
   print(i, end=' ')    #OUTPUT: 1 2 string\par
\par
\cf1\b\fs36 16. How is memory managed in Python?\par
\cf0\b0\fs32 Memory management in python is done by Python Memory Manager. Let say we have statement x = 5. Here 5 will get memory in private heap space and x will get memory in stack memory. X stores the ID of the object 5. So we can able to access that 5 by using id which is stored in x.\par
\par
\cf1\b\fs36 17. What are Python namespaces? Why are they used?\par
\cf0\b0\fs32 A namespace in python ensures that object names in program are unique and can be used without any conflict. Python itself maintains a namespace in the form of python dictionary. When a user creates a module, a global namespace will get created. Creation of local function create a local namespace.\par
Example;\par
x = 5 # this variable is in global namespace\par
def get_data():\par
  y = 10 # local namespace\par
  def add():\par
    return x + y\par
  return add()\par
print(get_data())\par
\par
\cf1\b\fs36 18. What are decorators in Python?\par
\cf0\b0\fs32 Decorators are the higher order function which is used in python to add extra functionality to the existing function without changing its structure.\par
Example;\par
def my_decorator(func):\par
  def wrapper_func():\par
    print("*************")\par
    func()\par
    print("*************")\par
  return wrapper_func\par
\par
@my_decorator\par
def hello():\par
  print("Hello World")\par
\par
hello()\par
\par
\cf1\b\fs36 19. What are Dict and List comprehensions?\par
\cf0\b0\fs32 Comprehensions in python allows us to write short and concise way of code to construct a new sequence. List comprehensions provides an elegant way to create a new list.\par
Example;\par
my_list = [10,8,5,6,4,12,52,56,57]\par
res_list = [num for num in my_list if num % 2 == 0]\par
print(res_list)\par
\par
Similarly we can deal with dictionary as well.\par
Example;\par
my_dict = \{\par
  "std1" : "Ravindra",\par
  "std2" : "Mayur",\par
  "std3" : "Jayesh",\par
  "std4" : "Sachin",\par
  "std5" : "Rahul"\par
\}\par
res_dict = \{k:v for k,v in my_dict.items() if len(v) > 5\}\par
print(res_dict)\par
\par
\cf1\b\fs36 20. What is lambda in Python? Why is it used?\par
\cf0\b0\fs32 Lambda is an anonymous function that can accept any number of arguments but it can have only one expression. This function is frequently used with higher order function.\par
Example1;\par
add = lambda a,b: a + b\par
print(add(3,4))\par
Example2;\par
nums = [1,2,3,4,5,6,7,8,9,10]\par
res = map(lambda a : a ** 2,nums)\par
print(list(res))\par
\par
\cf1\b\fs36 21. How do you copy an object in Python?\par
\cf0\b0\fs32 Inorder to create copies of an object, we need to use copy module. There are two way to create an copy of a object. Shallow copy and deep copy. Shallow copy does not create the copy of nested objects, it just copy the refernce of nested objects.\par
Example;\par
from copy import copy,deepcopy\par
list_1 = [1, 2, [3, 5], 4]\par
list_2 = copy(list_1) # shallow copy\par
list_2[1] = 10\par
list_2[2].append(50)\par
print(list_2)\par
print(list_1)\par
\par
Deep copy create the copy of object and nested object as well.\par
Example;\par
from copy import copy,deepcopy\par
list_1 = [1, 2, [3, 5], 4]\par
list_3 = deepcopy(list_1) # deepcopy\par
list_3[3] = 15\par
list_3[2].append(0)\par
\par
print(list_3)\par
print(list_1)\par
\par
\cf1\b\fs36 22. What are generators in Python?\par
\cf0\b0\fs32 Generator is special type of function which allows us to create our own iterator function. It does not return a single value, instead of it returns a sequence of values. In generator function we used yield statement instead of return statement.The difference between the yield and return statement is, yield statement pauses the execution and it again resumes the execution when interpreter strikes with next(). The return keyword terminates the execution.\par
Example;\par
def fib_gen(num):\par
  a = 0\par
  b = 1\par
  for i in range(num):\par
    yield a\par
    temp = a\par
    a = b\par
    b = b + temp\par
\par
my_gen = fib_gen(5)\par
\par
# for i in my_gen: # Internally calls next\par
#   print(i,end = " ")\par
\par
while True:\par
  try:\par
    print(next(my_gen), end = " ")\par
  except StopIteration:\par
    break\par
\par
\cf1\b\fs36 23. What is the use of help() and dir() functions?\par
\cf0\b0\fs32 The help() and dir() functions are the buit-in function in python. If you have imported any module and you don't know about that particular module. In this we can use help() function inorder to know what methods and variables it has. The dir() function returns a list of all the objects which are present in that particular module.\par
\par
\cf1\b\fs36 24. What are iterators in Python?\par
\cf0\b0\fs32 There are two important things in python iterable and iterator. Let us take one example;\par
li = [1,2,3,4] # iterable\par
for num in li:\par
  print(num)\par
\par
# iter(li) ==> next() \par
\par
for num in map(lambda a:a**2,li):\par
  print(num)\par
\par
Here list is the iterable. Python interpreter call the iter function and convert it into iterator and then call a next function. The next function we can call only on iterator not iterable.\par
\par
\cf1\b\fs36 25. What does *args and **kwargs mean?\par
\cf0\b0\fs32 Let us suppose we are passing the arguments more than the number of parameter to the function. Then it will throw an error. This type of error we can avoid by using "*" operator.\par
Example;\par
def add(x,y):\par
  return x + y\par
print(add(2,3,4,5,6)) # It throws an error.\par
\par
def add(*args):\par
  total = 0\par
  for num in args:\par
    total += num\par
  return total\par
\par
print(add(2,3,4,5,6))\par
# Here *args takes all the argument and returns a tuple.\par
\par
**kwargs takes all the keyword argument and return its dictionary which has key value pair\par
Example;\par
def details(**kwargs):\par
  print(kwargs)\par
details(name="Ravindra",city = "Pune")\par
\par
\cf1\b\fs36 26. Are access specifiers used in python?\par
\cf0\b0\fs32 Python does not make use of access specifiers. There is nothing like private or public variables in python. This is only for developer understanding. We used  "_ " for private variable and the variable name starts without _ are called public variables. \line\par
\cf1\b\fs36 27. Differentiate between new and override modifiers.\par
\cf0\b0\fs32 New modifiers is used to tell the compiler to use new implementation and not the base class function. Override modifiers is use to override the base class function inside the child class.\par
}
 